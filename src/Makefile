.PHONY: all clean install uninstall dist tests gcov_report open calc_build main_build rebuild clean_tests prepare_gcov generate_ui dvi

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è gcov_report
.NOTPARALLEL: gcov_report

# üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (macOS –∏–ª–∏ Linux)
OS := $(shell uname -s)

ifeq ($(OS), Darwin)  # macOS
    QT_PATH = /Users/nikitapotapov/Qt5.15.16
    LIB_PATHS = -F$(QT_PATH)/lib -L$(QT_PATH)/lib
    LIBS = -framework QtCore -framework QtWidgets -framework QtGui -framework QtPrintSupport
    MOC = $(QT_PATH)/bin/moc
    UIC = $(QT_PATH)/bin/uic
	INSTALL_DIR = /Applications
    APP_NAME = calc.app
else  # Linux
    QT_PATH = /usr
    LIB_PATHS = -L$(QT_PATH)/lib
    LIBS = -lQt5Core -lQt5Widgets -lQt5Gui -lQt5PrintSupport
    MOC = $(QT_PATH)/bin/moc
    UIC = $(QT_PATH)/bin/uic
	INSTALL_DIR = /usr/local/bin
    APP_NAME = smartcalc
endif

INCLUDE_PATHS = -I$(QT_PATH)/include \
                -I$(QT_PATH)/include/QtCore \
                -I$(QT_PATH)/include/QtWidgets \
                -I$(QT_PATH)/include/QtGui \
                -I$(QT_PATH)/lib/QtCore.framework/Versions/5/Headers \
                -I$(QT_PATH)/lib/QtWidgets.framework/Versions/5/Headers \
                -I$(QT_PATH)/lib/QtGui.framework/Versions/5/Headers \
                -I. -Icalc
CC = clang++
CFLAGS = -Wall -Wextra -Werror -std=c++20
LDFLAGS = $(LIB_PATHS) $(LIBS)
LFLAGS = -lgtest_main -lgtest -lpthread

# üîπ –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
SRC_FILES = smartcalc_model.cpp \
            smartcalc_controller.cpp \
            smartcalc_view.cpp \
            calc/credit.cpp \
            calc/deposit.cpp \
            calc/main.cpp \
            calc/mainwindow.cpp \
            calc/qcustomplot.cpp
OBJ_FILES = $(SRC_FILES:.cpp=.o)
UI_FILES = calc/credit.ui calc/deposit.ui calc/mainwindow.ui
GENERATED_UI_HEADERS = calc/ui_credit.h calc/ui_deposit.h calc/ui_mainwindow.h
MOC_FILES = calc/moc_credit.cpp calc/moc_deposit.cpp calc/moc_mainwindow.cpp calc/moc_qcustomplot.cpp
MOC_OBJ_FILES = $(MOC_FILES:.cpp=.o)
TARGET = calc/smartcalc

# üîπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
TEST_SRC = test.cpp smartcalc_model.cpp
TEST_OBJ = $(TEST_SRC:.cpp=.o)
TEST_TARGET = test_runner

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å (—Å –∑–∞–ø—É—Å–∫–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞)
all: calc_build main_build
	./$(TARGET)

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è `Makefile` –¥–ª—è `calc`, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
calc/Makefile:
	cd calc && qmake calc.pro

# üîπ –°–±–æ—Ä–∫–∞ `calc` —á–µ—Ä–µ–∑ qmake (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
calc_build: calc/Makefile $(GENERATED_UI_HEADERS)
	$(MAKE) -C calc -j$(shell nproc || sysctl -n hw.ncpu)

# üîπ –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
main_build: $(TARGET)

$(TARGET): $(OBJ_FILES) $(MOC_OBJ_FILES)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) $(OBJ_FILES) $(MOC_OBJ_FILES) -o $@ $(LDFLAGS)
ifeq ($(OS), Darwin)
	install_name_tool -add_rpath $(QT_PATH)/lib $@
endif

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
%.o: %.cpp $(GENERATED_UI_HEADERS)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -c $< -o $@

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è Moc-—Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
calc/moc_%.o: calc/moc_%.cpp
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -c $< -o $@

# üîπ –Ø–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ `ui_*.h` —Ñ–∞–π–ª–æ–≤
calc/ui_credit.h: calc/credit.ui
	$(UIC) $< -o $@
	@echo "Generated: $@"

calc/ui_deposit.h: calc/deposit.ui
	$(UIC) $< -o $@
	@echo "Generated: $@"

calc/ui_mainwindow.h: calc/mainwindow.ui
	$(UIC) $< -o $@
	@echo "Generated: $@"

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è `moc_*.cpp` —Ñ–∞–π–ª–æ–≤
calc/moc_qcustomplot.cpp: calc/qcustomplot.h
	$(MOC) $< -o $@
	@echo "Generated MOC file: $@"
calc/moc_credit.cpp: calc/credit.h
	$(MOC) $< -o $@
	@echo "Generated MOC file: $@"
calc/moc_deposit.cpp: calc/deposit.h
	$(MOC) $< -o $@
	@echo "Generated MOC file: $@"
calc/moc_mainwindow.cpp: calc/mainwindow.h
	$(MOC) $< -o $@
	@echo "Generated MOC file: $@"

# üîπ –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
tests: $(TEST_TARGET)
	./$(TEST_TARGET)

$(TEST_TARGET): $(TEST_OBJ)
	$(CC) $(CFLAGS) $(TEST_OBJ) -o $@ $(LFLAGS)

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Å gcovr
gcov_report: clean generate_ui prepare_gcov $(TEST_TARGET)_gcov
	./$(TEST_TARGET)_gcov  # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@if ! command -v gcovr &> /dev/null; then \
		echo "Error: gcovr is not installed. Install it with 'pip install gcovr'"; \
		exit 1; \
	fi
	mkdir -p report  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é report, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
	gcovr --html --html-details --output report/index.html \
		--exclude '.*moc_.*' \
    	--exclude '.*ui_.*' \
    	--exclude '.*/qt/.*' \
    	--exclude 'calc/qcustomplot\.cpp' \
    	--exclude 'calc/mainwindow\.cpp' \
    	--exclude 'calc/credit\.cpp' \
    	--exclude 'calc/deposit\.cpp' \
    	--print-summary
	@echo "Report generated: report/index.html"
	open report/index.html

# üîπ –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
$(TEST_TARGET)_gcov: $(TEST_SRC:.cpp=_gcov.o)
	$(CC) $(CFLAGS) --coverage $(INCLUDE_PATHS) $^ -o $@ $(LDFLAGS) $(LFLAGS)
ifeq ($(OS), Darwin)
	install_name_tool -add_rpath $(QT_PATH)/lib $@
endif

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
%_gcov.o: %.cpp $(GENERATED_UI_HEADERS)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) --coverage -c $< -o $@

calc/moc_%_gcov.o: calc/moc_%.cpp
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) --coverage -c $< -o $@

# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è gcov (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è moc_*.cpp)
prepare_gcov: $(MOC_FILES)

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ui_*.h
generate_ui: $(GENERATED_UI_HEADERS)

# üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
install: calc_build
ifeq ($(OS), Darwin)
	mkdir -p $(INSTALL_DIR)
	cp -r calc/$(APP_NAME) $(INSTALL_DIR)/
	@echo "Application installed to $(INSTALL_DIR)/$(APP_NAME)"
else
	mkdir -p $(INSTALL_DIR)
	cp $(TARGET) $(INSTALL_DIR)/$(APP_NAME)
	@echo "Application installed to $(INSTALL_DIR)/$(APP_NAME)"
endif

# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
uninstall:
ifeq ($(OS), Darwin)
	rm -rf $(INSTALL_DIR)/$(APP_NAME) $(TARGET) calc/calc.app
	@echo "Application uninstalled from $(INSTALL_DIR)/$(APP_NAME)"
else
	rm -f $(INSTALL_DIR)/$(APP_NAME)
	@echo "Application uninstalled from $(INSTALL_DIR)/$(APP_NAME)"
endif

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
dist: calc_build
	mkdir -p dist/calc_v2.0
	cp -r $(SRC_FILES) calc/*.h calc/*.ui calc/calc.pro dist/calc_v2.0/
ifeq ($(OS), Darwin)
	cp -r calc/$(APP_NAME) dist/calc_v2.0/
else
	cp $(TARGET) dist/calc_v2.0/
endif
	tar -czf calc_v2.0.tar.gz -C dist calc_v2.0
	rm -rf dist
	@echo "Distribution archive created: calc_v2.0.tar.gz"

dvi:
	open report/index.html

# üîπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
clean:
	rm -rf *.o $(TARGET) *.gcno *.gcda *.profraw *.profdata report Archive_calc_v2.0* build \
	    calc/ui_*.h calc/moc_*.cpp calc/moc_*.h calc/*.o calc/Makefile calc/calc.app report.* calc_v2.0.tar.gz \
	    calc/.qmake.stash test_runner calc/*.gcno calc/*.gcda coverage.info *_gcov.o calc/smartcalc_gcov $(TEST_TARGET)_gcov

# üîπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤
clean_tests:
	rm -f $(TEST_OBJ) $(TEST_TARGET)

# üîπ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
rebuild: clean all
